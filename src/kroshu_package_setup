#!/bin/bash

# Copyright (c) 2020, Zoltán Rési
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function prompt_overwrite() {
	read -r -p "File $1 already exists. Would you like to overwrite it? [Y/n]" input
	while true; do
		case $input in
			[Yy]* ) echo "yes"; break;;
			[Nn]* ) echo "no"; break;;
			* ) echo "Please answer Y(es) or N(o).";;
		esac
	done
}

function add_folders() {
	if ! [ -d ./src ]; then 
		mkdir ./src;
		touch ./src/.gitkeep
		echo "Added source folder ./src"
	fi
	if ! [ -d ./test ]; then 
		mkdir ./test; 
		touch ./test/.gitkeep
		echo "Added test folder ./test"
	fi
}

function add_sonar_properties() {
	if [ -f sonar-project.properties ]; then
		local overwrite=$(prompt_overwrite "sonar-project.properties")
		if [ $overwrite == "yes" ]; then
			rm -f sonar-project.properties
		else
			echo "Skipped file sonar-project.properties."
			return
		fi
	fi
	
	echo "sonar.organization=$organization
sonar.projectName=$package_name
sonar.projectKey=${organization}_${package_name}

sonar.projectVersion=1.0

sonar.host.url=https://sonarcloud.io

# Path is relative to the sonar-project.properties file (package root directory). Defaults to .
sonar.sources=./src
sonar.tests=./test
 
# Encoding of the source code. Default is default system encoding
sonar.sourceEncoding=UTF-8" >> sonar-project.properties

	if [ "$EUID" -eq 0 ]; then
		chown $SUDO_USER sonar-project.properties
	fi
	echo "Added file sonar-project.properties."
}

install_coverage_cmake_module() {
	if ! [ -f "/usr/lib/cmake/CodeCoverage/CodeCoverage.cmake" ]; then
		if [ "$EUID" -eq 0 ]; then
			echo "Downloading CodeCoverage.cmake module from github.com/kroshu/kroshu-tools..."
			curl "https://raw.githubusercontent.com/kroshu/kroshu-tools/master/cmake/CodeCoverage.cmake" -s --create-dirs -o /usr/lib/cmake/CodeCoverage/CodeCoverage.cmake
			chmod +rx -R /usr/lib/cmake/CodeCoverage
		else 
			echo "CodeCoverage cmake module not installed. Run script as root in order to properly set up code coverage."
			exit 1
		fi
	fi
}

setup_analysis() {
	echo "
######################
## Project analysis ##
######################

# Additional options for project analysis
set(SONARQUBE_PACKAGES_FILE \"none\" CACHE STRING \"Path to the file that contains the package source directories for SonarQube.\")
OPTION(TEST_COVERAGE \"Generate test coverage reports upon testing.\" OFF)

if(NOT ${SONARQUBE_PACKAGES_FILE} MATCHES \"none\")
  file(APPEND ${SONARQUBE_PACKAGES_FILE} \"${PROJECT_NAME};${PROJECT_SOURCE_DIR}\n\")
  message(${SONARQUBE_PACKAGES_FILE})
endif()

if(TEST_COVERAGE)
	# Set build type to debug to avoid compiler optimization when checking coverage
	set(CMAKE_BUILD_TYPE Debug)
	# Include coverage report related functions
	list(APPEND CMAKE_MODULE_PATH \"/usr/lib/cmake/CodeCoverage\")
	include(CodeCoverage)
	# Append compiler flags to gcc for generating coverage notes
	APPEND_COVERAGE_COMPILER_FLAGS()
	# Set coverage output dir to \${CMAKE_BINARY_DIR}/test_coverage
	SET_COVERAGE_OUTPUT_DIR()
endif()

if(TEST_COVERAGE)
	# Define a coverage target with some libs and executables to check
	#	NAME 	Name of coverage target. Default: coverage. Only works with default currently.
	#	TARGETS Library and executable targets for which coverage reports are requested.
	# add_coverage_gcov(NAME coverage TARGETS mypkg_lib mypkg_node)
endif()" >> CMakeLists.txt

	echo "Appended test coverage options to CMakeLists.txt."

}

if ! [ -f "CMakeLists.txt" ]; then
	echo "No CMakeLists.txt file detected, kroshu package setup aborted. Did you initialize the package?"
else
if [ $# -ne 0 ]; then
	organization="$1"
else
	organization="kroshu"
	echo "No organization key provided. Using default: kroshu."
fi
	package_dir="$(pwd)"
	package_name="${package_dir##*/}"

	install_coverage_cmake_module
	add_folders
	add_sonar_properties
	setup_for_coverage
fi
